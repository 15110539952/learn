git config --global user.name 'xxx'
git config --global user.email 'xxx'

git init
git add <hello.txt>  # 把所有要提交的文件修改放到暂存区
git commit -m 'add a file' # 把暂存区的所有内容提交到当前分支
git status #掌握工作区状态
git diff #查看文件修改内容
git log #查看提交历史
	git log --pretty=oneline
git reset --hard HEAD^ #回退到上一个版本
	HEAD^^(上上版本),HEAD~100(往上100个版本)
	commit id(版本号) 可回到指定版本
git reflog #查看历史命令
工作区（Working Directory）
版本库（Repository） #.git
	stage(index) 暂存区
	master Git自动创建的分支
	HEAD 指针
git diff HEAD -- <file> #查看工作区和版本库里最新版本的区别
git checkout -- <file> #用版本库的版本替换工作区的版本，无论是工作区的修改还是删除，都可以'一键还原'
	#丢弃工作区的修改（让文件回到最近一次的git commit或git add时的状态）
git reset HEAD <file> #把暂存区的修改撤销掉，重新放回工作区。
git rm <file> #删除文件，若文件已提交到版本库，不用担心误删，但是只能恢复文件到最新版本

ssh-keygen -t rsa -C 'user@example.com' #创建SSH Key
git remote add origin git@github.com:username/repostery.git #关联本地仓库，远程库的名字为origin
	#第一次使用Git的clone或者push命令连接GitHub时需确认
git push -u origin master #把当前分支master推送到远程
	#第一次推送分支时，-u参数不但推送，而且将本地的分支和远程的分支关联起来
git clone git@github.com:username/repostery.git #从远程库克隆一个到本地库
	#git支持多种协议，包括https，但通过试试支持原生git协议速度最快
	
